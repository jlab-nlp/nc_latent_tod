from dataclasses import dataclass
from typing import TypedDict, List, Callable, Optional, Dict, Any

from nc_latent_tod.data_types import SchemaBeliefState, ValidActsRepresentation
from nc_latent_tod.db.types import DBEntity
from nc_latent_tod.schemas.data_types import ServiceSchema


class GenericInputs(TypedDict):
    """
    A dictionary type representing inputs to a task module (DST, Act Tagging, Policy, Response Generation, etc.)

    Experiment and task specific types should sub-class
    """
    pass


class GenericOutputs(TypedDict):
    """
    A dictionary type representing the outputs generated by a module for any experiment type.

    Attributes:
        - wandb_log_items: (optional) a dictionary of items to log to wandb
        - running_log_items: (optional) a dictionary of items to log to the running log
    """
    # Not an experiment type, but a superclass for generic experiment outputs
    wandb_log_items: Optional[Dict[str, Any]]
    running_log_items: Optional[Dict[str, Any]]


class SchemaGuidedDSTInputs(GenericInputs):
    """
    The inputs to any schema guided dialogue state tracking module for an experiment

    Attributes:
        - schema: the list of service schemas this DST method should support
        - history: the turn history of the dialogue, ending with a 'user' turn, alternating between 'system' and 'user'
        - belief_state_history: the sequence of previous belief states (generally predicted)
    """
    schema: List[ServiceSchema]
    user_utterances: List[str]
    system_utterances: List[str]
    belief_state_history: List[SchemaBeliefState]


class OfflineSchemaGuidedDSTInputs(SchemaGuidedDSTInputs):
    system_response: str
    system_response_acts: Optional[ValidActsRepresentation]
    last_system_response_acts: Optional[ValidActsRepresentation]


class SchemaGuidedDSTOutputs(GenericOutputs):
    """
    The outputs to any schema guided dialogue state tracking module for an experiment

    Attributes:
        - schema_belief_state: the next belief state prediction
    """
    schema_belief_state: SchemaBeliefState
    active_service_names: Optional[List[str]]


"""
A DST Module is simply a function from inputs to outputs
"""
DSTModule = Callable[[SchemaGuidedDSTInputs], SchemaGuidedDSTOutputs]

"""
Same as a DSTModule, but supports batching
"""
BatchDSTModule = Callable[[List[SchemaGuidedDSTInputs]], List[SchemaGuidedDSTOutputs]]


class SchemaGuidedActTaggingInputs(GenericInputs):
    """
    Act Tagging is the offline process for labelling system dialogue acts, which minimally includes the system_response
    which is being labelled. Additional utterances and structures can be included for context.
    """
    schema: List[ServiceSchema]
    last_system_acts: Optional[ValidActsRepresentation]
    system_response: str
    user_utterances: Optional[List[str]]
    system_utterances: Optional[List[str]]
    prior_state: Optional[SchemaBeliefState]
    next_state: Optional[SchemaBeliefState]


class SchemaGuidedActTaggingOutputs(GenericOutputs):
    """
    Output of an act tagging experiment, which is a list of system acts for the given system response
    """
    system_response_acts: ValidActsRepresentation
    active_service_names: Optional[List[str]]


class SchemaGuidedPolicyInputs(GenericInputs):
    """
    Policy is the causal/online process for predicting system dialogue acts from dialogue context. Since no argument is
    strictly necessary, all are 'optional' and the policy designer can decide what to use.
    """
    schema: List[ServiceSchema]
    last_system_acts: Optional[ValidActsRepresentation]
    user_utterances: Optional[List[str]]
    system_utterances: Optional[List[str]]
    prior_state: Optional[SchemaBeliefState]
    next_state: Optional[SchemaBeliefState]


class SchemaGuidedPolicyOutputs(GenericOutputs):
    """
    Output of a policy experiment, which is a list of system acts for the given dialogue context
    """
    system_response_acts: ValidActsRepresentation
    active_service_names: Optional[List[str]]


class SchemaGuidedResponseGenInputs(GenericInputs):
    """
    Response Generation is the causal/online process for predicting system responses from dialogue context. Since no
    argument is strictly necessary, all are 'optional' and the response generator can decide what to use.
    """
    schema: List[ServiceSchema]
    last_system_acts: Optional[ValidActsRepresentation]
    user_utterances: Optional[List[str]]
    system_utterances: Optional[List[str]]
    prior_state: Optional[SchemaBeliefState]
    next_state: Optional[SchemaBeliefState]
    system_response_acts: Optional[ValidActsRepresentation]


class SchemaGuidedResponseGenOutputs(GenericOutputs):
    """
    Output of a response generation experiment, which is a system response for the given dialogue context.
    """
    system_response: str


BatchActPredModule = Callable[[List[SchemaGuidedActTaggingInputs]], List[SchemaGuidedActTaggingOutputs]]

class ResponseGenInputs(TypedDict):
    """
    A dictionary type representing the inputs required for generating system responses.

    Attributes:
    - schema_belief_state (SchemaBeliefState): Represents the belief state of the system based on the schema.
    - turn_user_utterance (str): The most recent utterance or input from the user.
    - db_result (Optional[List[DBEntity]]): A list of database entities matching belief state
    - history (Optional[List[str]]): A list of previous user and system utterances in the conversation. Don't include
        last_turn_system_utterance, turn_user_utterance.
        Full conversation history should be: history + [last_turn_system_utterance, turn_user_utterance]
    - last_turn_system_utterance (Optional[str]): The last utterance or response from the system (turn t - 1)
    - active_service_names: (Optional[List[str]]): An optional list of service names considered active for this turn
      (can be derived from schema_belief_state, used to generate db_result, logged with inputs for visibility)
    """
    schema_belief_state: SchemaBeliefState
    turn_user_utterance: str
    db_result: Optional[List[DBEntity]]
    history: Optional[List[str]]
    last_turn_system_utterance: Optional[str]
    active_service_names: Optional[List[str]]


class ResponseGenOutputs(GenericOutputs):
    """
    A dictionary type representing the outputs generated by the response generation system.

    Attributes (see also: GenericOutputs):
    - system_response (str): The generated response or output from the system based on the given inputs.
    """
    system_response: str
    act: Optional[str]


class EvaluableSystemResponseTurn(TypedDict):
    dialogue_id: str
    turn_id: int
    response: str
    state: SchemaBeliefState
    active_domains: Optional[List[str]]


RGEvaluationInput = Dict[str, List[EvaluableSystemResponseTurn]]

ResponseGenerator = Callable[[ResponseGenInputs], ResponseGenOutputs]
BatchResponseGenerator = Callable[[List[ResponseGenInputs]], List[ResponseGenOutputs]]
